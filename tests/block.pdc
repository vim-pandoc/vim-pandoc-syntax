# Block spans

this is a paragraph.

this is a long paragraph with *italics* and **bold** items.

this is a long paragraph where *an italicized section ends with a space *.

this is a *long paragraph that spans 
two* lines.

this is a paragraph with *a span that is very very very very very very very very
very very very very very very very very very very very very very very very very
very very very very very very very* long. 

this is a paragraph where _italics_ and __bold__ are set with underscores.

***this*** is a paragraph with ***strongly emphasized*** words, such as this
___one___.

# italics *in* titles

yes, we can.

# bold **in** titles

inline `code` in this paragraph. this is a ``test for this`` stuff.

superscripts ^are\ kinda^ cool (2^12^). subscripts can ~also~ be ~kinda\ lame~
(like drinking H~2~O). there's also sections with ~~striked out~~ text.

this ~= could be a problem if we allowed unscaped spaces.

a new line can be outputted for lines with a couple  
of spaces.

# mix and match

oh no! mix and match *is **hard** stuff*, real hard.

mixing is **quite *the* problem**. 

but... we ***kinda tackled it*** ;) 

We once had problems with ***quite* the problem**, but not anymore.

# blockquotes

> this is a test block
> this is another *test*. block
  a block
> less block
aaa block

no block.

# code blocks

    def func(a):
	return 1

no code

~~~python
def func(a):
    return 1
~~~

~~~ {.python}
print("hi")
~~~

test

    ~~~haskell
    test
    ~~~

```vim
:exe "cmd args"
```

> ``` c
> void (*signal(int sig, void (*disp)(int)))(int);
> ```
> 
> If `signal()` is used, `disp` is the address of a signal handler, and `sig`
> is not `SIGILL`, `SIGTRAP`, or `SIGPWR`, the system first sets the signal's
> disposition to `SIG_DFL` before executing the signal handler.

# definitions

hello
:  this is a definition.

`hello`
:  this is a definition

# lists

* this
* this
    * and this
	+ and this

1) a
2) b

